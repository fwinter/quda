# Makefile.in generated by automake 1.11.1 from Makefile.am.
# mainprogs/main/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



VPATH = /home/fwinter/git/chroma/mainprogs/main
pkgdatadir = $(datadir)/chroma
pkgincludedir = $(includedir)/chroma
pkglibdir = $(libdir)/chroma
pkglibexecdir = $(libexecdir)/chroma
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
#am__append_1 = 
#am__append_2 = 
#am__append_3 = 
#am__append_4 = 
#am__append_5 = 
#am__append_6 = 
am__append_7 = -I/home/fwinter/git/quda/include -I/opt/cuda4/include
am__append_8 = -L/opt/cuda4/lib64 -L/home/fwinter/git/quda/lib
am__append_9 = -lquda -lcudart
#am__append_10 = -I/qmp/include \
#	-I/qio/include \
#	-I/qla/include \
#	-I/qdp/include \
#	-I/qopqdp/include
#am__append_11 = -L/qopqdp/lib \
#	-lqopqdp \
#	-L/qdp/lib \
#	-lqdp_d3 -lqdp_df3 \
#	-lqdp_f3 -lqdp_df \
#	-lqdp_d -lqdp_f \
#	-lqdp_int \
#	-lqdp_common \
#	-L/qmp/lib \
#	-lqmp \
#	-L/qio/lib \
#	-lqio -llime \
#	-L/qla/lib \
#	-lqla_c99 \
#	-lqla_cmath \
#	-lqla_d3 -lqla_d \
#	-lqla_df3 -lqla_df \
#	-lqla_dq3 -lqla_dq \
#	-lqla_f3 -lqla_f \
#	-lqla_int -lqla_q3 \
#	-lqla_q \
#	-lqla_random
#am__append_12 = -I$(TOPDIR)/other_libs//include -I$(BUILDDIR)/other_libs//include
#am__append_13 = -L$(BUILDDIR)/other_libs//lib
#am__append_14 = -llevel3 -lqdp -lXPathReader -lxmlWriter -lqio -lqmem -llime -lxml2 -lcudart -lfiledb -lfilehash
#am__append_15 = -I$(TOPDIR)/other_libs//include -I$(BUILDDIR)/other_libs//include
#am__append_16 = -L$(BUILDDIR)/other_libs//lib
#am__append_17 = -ldslash -lqdp -lXPathReader -lxmlWriter -lqio -lqmem -llime -lxml2 -lcudart -lfiledb -lfilehash
#am__append_18 =  \
#	-I$(TOPDIR)/other_libs/ \
#	-I$(BUILDDIR)/other_libs/
#am__append_19 = -L$(BUILDDIR)/other_libs/
#am__append_20 = -lcg-dwf
#am__append_21 = 
#am__append_22 = 
#am__append_23 = 
#am__append_24 = 
#am__append_25 = 
#am__append_26 = 
bin_PROGRAMS = chroma$(EXEEXT) purgaug$(EXEEXT) cfgtransf$(EXEEXT) \
	hmc$(EXEEXT) spectrum_s$(EXEEXT)
check_PROGRAMS = collect_propcomp$(EXEEXT) qpropgfix$(EXEEXT) \
	qproptrev$(EXEEXT) qpropqio$(EXEEXT) qproptransf$(EXEEXT) \
	wallformfac$(EXEEXT) make_meson_ops$(EXEEXT) \
	make_baryon_ops$(EXEEXT) baryon_ops_red_dil$(EXEEXT)
EXTRA_PROGRAMS = qpropadd$(EXEEXT) propagator_comp$(EXEEXT) \
	multi_propagator$(EXEEXT) multi_propagator_comp$(EXEEXT) \
	collect_multi_propcomp$(EXEEXT) spectrum_s$(EXEEXT)
subdir = mainprogs/main
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/./config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/lib/chroma_config_internal.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_baryon_ops_red_dil_OBJECTS = baryon_ops_red_dil.$(OBJEXT)
baryon_ops_red_dil_OBJECTS = $(am_baryon_ops_red_dil_OBJECTS)
baryon_ops_red_dil_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
baryon_ops_red_dil_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_cfgtransf_OBJECTS = cfgtransf.$(OBJEXT)
cfgtransf_OBJECTS = $(am_cfgtransf_OBJECTS)
cfgtransf_LDADD = $(LDADD)
cfgtransf_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_chroma_OBJECTS = chroma.$(OBJEXT)
chroma_OBJECTS = $(am_chroma_OBJECTS)
chroma_LDADD = $(LDADD)
chroma_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_collect_multi_propcomp_OBJECTS = collect_multi_propcomp.$(OBJEXT)
collect_multi_propcomp_OBJECTS = $(am_collect_multi_propcomp_OBJECTS)
collect_multi_propcomp_LDADD = $(LDADD)
collect_multi_propcomp_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_collect_propcomp_OBJECTS = collect_propcomp.$(OBJEXT)
collect_propcomp_OBJECTS = $(am_collect_propcomp_OBJECTS)
collect_propcomp_LDADD = $(LDADD)
collect_propcomp_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_hmc_OBJECTS = hmc.$(OBJEXT)
hmc_OBJECTS = $(am_hmc_OBJECTS)
hmc_LDADD = $(LDADD)
hmc_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_make_baryon_ops_OBJECTS = make_baryon_ops.$(OBJEXT)
make_baryon_ops_OBJECTS = $(am_make_baryon_ops_OBJECTS)
make_baryon_ops_LDADD = $(LDADD)
make_baryon_ops_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_make_meson_ops_OBJECTS = make_meson_ops.$(OBJEXT)
make_meson_ops_OBJECTS = $(am_make_meson_ops_OBJECTS)
make_meson_ops_LDADD = $(LDADD)
make_meson_ops_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
multi_propagator_SOURCES = multi_propagator.c
multi_propagator_OBJECTS = multi_propagator.$(OBJEXT)
multi_propagator_LDADD = $(LDADD)
multi_propagator_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_multi_propagator_comp_OBJECTS = multi_propagator_comp.$(OBJEXT)
multi_propagator_comp_OBJECTS = $(am_multi_propagator_comp_OBJECTS)
multi_propagator_comp_LDADD = $(LDADD)
multi_propagator_comp_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_propagator_comp_OBJECTS = propagator_comp.$(OBJEXT)
propagator_comp_OBJECTS = $(am_propagator_comp_OBJECTS)
propagator_comp_LDADD = $(LDADD)
propagator_comp_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_purgaug_OBJECTS = purgaug.$(OBJEXT)
purgaug_OBJECTS = $(am_purgaug_OBJECTS)
purgaug_LDADD = $(LDADD)
purgaug_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_qpropadd_OBJECTS = qpropadd.$(OBJEXT)
qpropadd_OBJECTS = $(am_qpropadd_OBJECTS)
qpropadd_LDADD = $(LDADD)
qpropadd_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_qpropgfix_OBJECTS = qpropgfix.$(OBJEXT)
qpropgfix_OBJECTS = $(am_qpropgfix_OBJECTS)
qpropgfix_LDADD = $(LDADD)
qpropgfix_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_qpropqio_OBJECTS = qpropqio.$(OBJEXT)
qpropqio_OBJECTS = $(am_qpropqio_OBJECTS)
qpropqio_LDADD = $(LDADD)
qpropqio_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_qproptransf_OBJECTS = qproptransf.$(OBJEXT)
qproptransf_OBJECTS = $(am_qproptransf_OBJECTS)
qproptransf_LDADD = $(LDADD)
qproptransf_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_qproptrev_OBJECTS = qproptrev.$(OBJEXT)
qproptrev_OBJECTS = $(am_qproptrev_OBJECTS)
qproptrev_LDADD = $(LDADD)
qproptrev_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_spectrum_s_OBJECTS = spectrum_s.$(OBJEXT)
spectrum_s_OBJECTS = $(am_spectrum_s_OBJECTS)
spectrum_s_LDADD = $(LDADD)
spectrum_s_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am_wallformfac_OBJECTS = wallformfac.$(OBJEXT)
wallformfac_OBJECTS = $(am_wallformfac_OBJECTS)
wallformfac_LDADD = $(LDADD)
wallformfac_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)/lib
depcomp = $(SHELL) $(top_srcdir)/./config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(baryon_ops_red_dil_SOURCES) $(cfgtransf_SOURCES) \
	$(chroma_SOURCES) $(collect_multi_propcomp_SOURCES) \
	$(collect_propcomp_SOURCES) $(hmc_SOURCES) \
	$(make_baryon_ops_SOURCES) $(make_meson_ops_SOURCES) \
	multi_propagator.c $(multi_propagator_comp_SOURCES) \
	$(propagator_comp_SOURCES) $(purgaug_SOURCES) \
	$(qpropadd_SOURCES) $(qpropgfix_SOURCES) $(qpropqio_SOURCES) \
	$(qproptransf_SOURCES) $(qproptrev_SOURCES) \
	$(spectrum_s_SOURCES) $(wallformfac_SOURCES)
DIST_SOURCES = $(baryon_ops_red_dil_SOURCES) $(cfgtransf_SOURCES) \
	$(chroma_SOURCES) $(collect_multi_propcomp_SOURCES) \
	$(collect_propcomp_SOURCES) $(hmc_SOURCES) \
	$(make_baryon_ops_SOURCES) $(make_meson_ops_SOURCES) \
	multi_propagator.c $(multi_propagator_comp_SOURCES) \
	$(propagator_comp_SOURCES) $(purgaug_SOURCES) \
	$(qpropadd_SOURCES) $(qpropgfix_SOURCES) $(qpropqio_SOURCES) \
	$(qproptransf_SOURCES) $(qproptrev_SOURCES) \
	$(spectrum_s_SOURCES) $(wallformfac_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/fwinter/git/chroma/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/fwinter/git/chroma/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/fwinter/git/chroma/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/fwinter/git/chroma/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/fwinter/git/chroma/config/missing --run automake-1.11
AWK = mawk
BAGEL_CLOVER_CONFIG = 
BAGEL_CLOVER_CXXFLAGS = 
BAGEL_CLOVER_DSLASH_CXXFLAGS = 
BAGEL_CLOVER_DSLASH_LDFLAGS = 
BAGEL_CLOVER_DSLASH_LIBS = 
BAGEL_CLOVER_LDFLAGS = 
BAGEL_CLOVER_LIBS = 
BAGEL_WILSON_DSLASH_CONFIG = 
BAGEL_WILSON_DSLASH_CXXFLAGS = 
BAGEL_WILSON_DSLASH_LDFLAGS = 
BAGEL_WILSON_DSLASH_LIBS = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CG_DWF_DIR = 
CG_DWF_ENABLED = 
CPPFLAGS = 
CPP_DSLASH_DIR = 
CPP_DSLASH_ENABLED = no
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = true
DVIPDF = dvipdf
DVIPS = dvips
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
GMP_CXXFLAGS = 
GMP_LDFLAGS = 
GMP_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LAPACK_ENABLED = no
LATEX = latex
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/fwinter/git/chroma/config/missing --run makeinfo
MDWF_CONFIG = 
MDWF_CXXFLAGS = 
MDWF_ENABLED = 
MDWF_LDFLAGS = 
MDWF_LIBS = 
MKDIR_P = /bin/mkdir -p
OBJEXT = o
OPT_EIGCG_ENABLED = no
PACKAGE = chroma
PACKAGE_BUGREPORT = edwards@jlab.org
PACKAGE_NAME = chroma
PACKAGE_STRING = chroma 3.40.0
PACKAGE_TARNAME = chroma
PACKAGE_URL = 
PACKAGE_VERSION = 3.40.0
PATH_SEPARATOR = :
QDPC_DIR = 
QDPXX_CONFIG = /home/fwinter/toolchain/install/qdp++-quda-accel-generic-devel-scalar-single/bin/qdp++-config
QDPXX_CXXFLAGS = -O3 -I/home/fwinter/toolchain/install/qdp++-quda-accel-generic-devel-scalar-single/include -I/usr/include/libxml2
QDPXX_LDFLAGS = -L/home/fwinter/toolchain/install/qdp++-quda-accel-generic-devel-scalar-single/lib -L/opt/cuda4/lib64
QDPXX_LIBS = -lqdp -lXPathReader -lxmlWriter -lqio -lqmem -llime -lxml2 -lcudart -lfiledb -lfilehash
QDPXX_NC = 3
QDPXX_ND = 4
QDPXX_NS = 4
QDPXX_PARALLEL_ARCH = scalar
QDPXX_PRECISION = single
QDP_LAPACK_DIR = qdp-lapack
QMT_CXXFLAGS = 
QMT_LDFLAGS = 
QMT_LIBS = 
QUDA_0_2_CXXFLAGS = 
QUDA_0_2_LDFLAGS = 
QUDA_0_2_LIBS = 
QUDA_0_3_CXXFLAGS = -I/home/fwinter/git/quda/include -I/opt/cuda4/include
QUDA_0_3_LDFLAGS = -L/opt/cuda4/lib64 -L/home/fwinter/git/quda/lib
QUDA_0_3_LIBS = -lquda -lcudart
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
SSE_DSLASH_DIR = 
SSE_DSLASH_ENABLED = no
STRIP = 
VERSION = 3.40.0
XMLDIFF = xmldiff
abs_builddir = /home/fwinter/git/quda/mainprogs/main
abs_srcdir = /home/fwinter/git/chroma/mainprogs/main
abs_top_builddir = /home/fwinter/git/quda
abs_top_srcdir = /home/fwinter/git/chroma
ac_ct_CC = gcc
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/fwinter/git/chroma/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/fwinter/toolchain/install/chroma-quda-accel-generic-devel-scalar-single
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/fwinter/git/chroma/mainprogs/main
subdirs =  other_libs/qdp-lapack
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = /home/fwinter/git/chroma

#
TOPDIR = /home/fwinter/git/chroma
BUILDDIR = ../..

#
# Include Path
#
INCFLAGS = -I$(TOPDIR)/mainprogs/main -I$(TOPDIR)/lib -I$(BUILDDIR)/lib

#
# Any other compiler flags
#
AM_CXXFLAGS = $(INCFLAGS) -O3 -I/home/fwinter/toolchain/install/qdp++-quda-accel-generic-devel-scalar-single/include -I/usr/include/libxml2 \
	  -O3 \
	$(am__append_1) $(am__append_4) $(am__append_7) \
	$(am__append_10) $(am__append_12) $(am__append_15) \
	$(am__append_18) $(am__append_21) $(am__append_24)
AM_LDFLAGS = -L$(BUILDDIR)/lib -L/home/fwinter/toolchain/install/qdp++-quda-accel-generic-devel-scalar-single/lib -L/opt/cuda4/lib64 \
	   \
	$(am__append_2) $(am__append_5) $(am__append_8) \
	-L$(BUILDDIR)/other_libs/qdp-lapack/lib $(am__append_13) \
	$(am__append_16) $(am__append_19) $(am__append_22) \
	$(am__append_25)
LDADD = -lchroma -lqdp -lXPathReader -lxmlWriter -lqio -lqmem -llime -lxml2 -lcudart -lfiledb -lfilehash   \
	 $(am__append_3) $(am__append_6) $(am__append_9) \
	$(am__append_11) -lqdp-lapack $(am__append_14) \
	$(am__append_17) $(am__append_20) $(am__append_23) \
	$(am__append_26)

#
# Local Headers
#
HDRS = 

#
# The program and its dependencies
#
chroma_SOURCES = chroma.cc
propagator_comp_SOURCES = propagator_comp.cc
multi_propagator_comp_SOURCES = multi_propagator_comp.cc
collect_propcomp_SOURCES = collect_propcomp.cc
collect_multi_propcomp_SOURCES = collect_multi_propcomp.cc
spectrum_s_SOURCES = spectrum_s.cc
hmc_SOURCES = hmc.cc
purgaug_SOURCES = purgaug.cc
wallformfac_SOURCES = wallformfac.cc
qproptransf_SOURCES = qproptransf.cc
qpropqio_SOURCES = qpropqio.cc
qpropadd_SOURCES = qpropadd.cc
qpropgfix_SOURCES = qpropgfix.cc
qproptrev_SOURCES = qproptrev.cc
cfgtransf_SOURCES = cfgtransf.cc
make_baryon_ops_SOURCES = make_baryon_ops.cc
make_meson_ops_SOURCES = make_meson_ops.cc
baryon_ops_red_dil_SOURCES = baryon_ops_red_dil.cc

#mainparam_io_SOURCES= mainparam_io.cc

#
# The latter rule will always try to rebuild libchroma.a when you 
# try to compile example

# build lib is a target that goes to the build dir of the library and 
# does a make to make sure all those dependencies are OK. In order
# for it to be done every time, we have to make it a 'phony' target
DEPENDENCIES = build_chroma_libs rebuild_other_libs
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu mainprogs/main/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu mainprogs/main/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
baryon_ops_red_dil$(EXEEXT): $(baryon_ops_red_dil_OBJECTS) $(baryon_ops_red_dil_DEPENDENCIES) 
	@rm -f baryon_ops_red_dil$(EXEEXT)
	$(CXXLINK) $(baryon_ops_red_dil_OBJECTS) $(baryon_ops_red_dil_LDADD) $(LIBS)
cfgtransf$(EXEEXT): $(cfgtransf_OBJECTS) $(cfgtransf_DEPENDENCIES) 
	@rm -f cfgtransf$(EXEEXT)
	$(CXXLINK) $(cfgtransf_OBJECTS) $(cfgtransf_LDADD) $(LIBS)
chroma$(EXEEXT): $(chroma_OBJECTS) $(chroma_DEPENDENCIES) 
	@rm -f chroma$(EXEEXT)
	$(CXXLINK) $(chroma_OBJECTS) $(chroma_LDADD) $(LIBS)
collect_multi_propcomp$(EXEEXT): $(collect_multi_propcomp_OBJECTS) $(collect_multi_propcomp_DEPENDENCIES) 
	@rm -f collect_multi_propcomp$(EXEEXT)
	$(CXXLINK) $(collect_multi_propcomp_OBJECTS) $(collect_multi_propcomp_LDADD) $(LIBS)
collect_propcomp$(EXEEXT): $(collect_propcomp_OBJECTS) $(collect_propcomp_DEPENDENCIES) 
	@rm -f collect_propcomp$(EXEEXT)
	$(CXXLINK) $(collect_propcomp_OBJECTS) $(collect_propcomp_LDADD) $(LIBS)
hmc$(EXEEXT): $(hmc_OBJECTS) $(hmc_DEPENDENCIES) 
	@rm -f hmc$(EXEEXT)
	$(CXXLINK) $(hmc_OBJECTS) $(hmc_LDADD) $(LIBS)
make_baryon_ops$(EXEEXT): $(make_baryon_ops_OBJECTS) $(make_baryon_ops_DEPENDENCIES) 
	@rm -f make_baryon_ops$(EXEEXT)
	$(CXXLINK) $(make_baryon_ops_OBJECTS) $(make_baryon_ops_LDADD) $(LIBS)
make_meson_ops$(EXEEXT): $(make_meson_ops_OBJECTS) $(make_meson_ops_DEPENDENCIES) 
	@rm -f make_meson_ops$(EXEEXT)
	$(CXXLINK) $(make_meson_ops_OBJECTS) $(make_meson_ops_LDADD) $(LIBS)
multi_propagator$(EXEEXT): $(multi_propagator_OBJECTS) $(multi_propagator_DEPENDENCIES) 
	@rm -f multi_propagator$(EXEEXT)
	$(LINK) $(multi_propagator_OBJECTS) $(multi_propagator_LDADD) $(LIBS)
multi_propagator_comp$(EXEEXT): $(multi_propagator_comp_OBJECTS) $(multi_propagator_comp_DEPENDENCIES) 
	@rm -f multi_propagator_comp$(EXEEXT)
	$(CXXLINK) $(multi_propagator_comp_OBJECTS) $(multi_propagator_comp_LDADD) $(LIBS)
propagator_comp$(EXEEXT): $(propagator_comp_OBJECTS) $(propagator_comp_DEPENDENCIES) 
	@rm -f propagator_comp$(EXEEXT)
	$(CXXLINK) $(propagator_comp_OBJECTS) $(propagator_comp_LDADD) $(LIBS)
purgaug$(EXEEXT): $(purgaug_OBJECTS) $(purgaug_DEPENDENCIES) 
	@rm -f purgaug$(EXEEXT)
	$(CXXLINK) $(purgaug_OBJECTS) $(purgaug_LDADD) $(LIBS)
qpropadd$(EXEEXT): $(qpropadd_OBJECTS) $(qpropadd_DEPENDENCIES) 
	@rm -f qpropadd$(EXEEXT)
	$(CXXLINK) $(qpropadd_OBJECTS) $(qpropadd_LDADD) $(LIBS)
qpropgfix$(EXEEXT): $(qpropgfix_OBJECTS) $(qpropgfix_DEPENDENCIES) 
	@rm -f qpropgfix$(EXEEXT)
	$(CXXLINK) $(qpropgfix_OBJECTS) $(qpropgfix_LDADD) $(LIBS)
qpropqio$(EXEEXT): $(qpropqio_OBJECTS) $(qpropqio_DEPENDENCIES) 
	@rm -f qpropqio$(EXEEXT)
	$(CXXLINK) $(qpropqio_OBJECTS) $(qpropqio_LDADD) $(LIBS)
qproptransf$(EXEEXT): $(qproptransf_OBJECTS) $(qproptransf_DEPENDENCIES) 
	@rm -f qproptransf$(EXEEXT)
	$(CXXLINK) $(qproptransf_OBJECTS) $(qproptransf_LDADD) $(LIBS)
qproptrev$(EXEEXT): $(qproptrev_OBJECTS) $(qproptrev_DEPENDENCIES) 
	@rm -f qproptrev$(EXEEXT)
	$(CXXLINK) $(qproptrev_OBJECTS) $(qproptrev_LDADD) $(LIBS)
spectrum_s$(EXEEXT): $(spectrum_s_OBJECTS) $(spectrum_s_DEPENDENCIES) 
	@rm -f spectrum_s$(EXEEXT)
	$(CXXLINK) $(spectrum_s_OBJECTS) $(spectrum_s_LDADD) $(LIBS)
wallformfac$(EXEEXT): $(wallformfac_OBJECTS) $(wallformfac_DEPENDENCIES) 
	@rm -f wallformfac$(EXEEXT)
	$(CXXLINK) $(wallformfac_OBJECTS) $(wallformfac_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/baryon_ops_red_dil.Po
include ./$(DEPDIR)/cfgtransf.Po
include ./$(DEPDIR)/chroma.Po
include ./$(DEPDIR)/collect_multi_propcomp.Po
include ./$(DEPDIR)/collect_propcomp.Po
include ./$(DEPDIR)/hmc.Po
include ./$(DEPDIR)/make_baryon_ops.Po
include ./$(DEPDIR)/make_meson_ops.Po
include ./$(DEPDIR)/multi_propagator.Po
include ./$(DEPDIR)/multi_propagator_comp.Po
include ./$(DEPDIR)/propagator_comp.Po
include ./$(DEPDIR)/purgaug.Po
include ./$(DEPDIR)/qpropadd.Po
include ./$(DEPDIR)/qpropgfix.Po
include ./$(DEPDIR)/qpropqio.Po
include ./$(DEPDIR)/qproptransf.Po
include ./$(DEPDIR)/qproptrev.Po
include ./$(DEPDIR)/spectrum_s.Po
include ./$(DEPDIR)/wallformfac.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-checkPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS

${bin_PROGRAMS}: ${DEPENDENCIES}
${check_PROGRAMS}: ${DEPENDENCIES}
${EXTRA_PROGRAMS}: ${DEPENDENCIES}

.PHONY: build_chroma_libs
build_chroma_libs:
	cd $(BUILDDIR)/lib ; $(MAKE)

.PHONY: rebuild_other_libs
rebuild_other_libs:
	cd $(BUILDDIR)/other_libs ; $(MAKE)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
